>>> MyList = __import__('1-my_list').MyList

>>> my_list = MyList()

>>> print(MyList([1, 2, 3, 4]))
[1, 2, 3, 4]

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 2, 3, 5]

>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of [1, 2, 3, 5]>

>>> print(my_list)
[1, 2, 3, 5]

>>> MyList.print_sorted([4, 3, 2, 1])
[1, 2, 3, 4]

>>> MyList.print_sorted([-4, -3, -2, -1])
[-4, -3, -2, -1]

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]

>>> print(MyList([1, 2, 3, 4, 5, 6]))
[1, 2, 3, 4, 5, 6]

>>> my_list = MyList(); print(my_list)
[]

>>> my_list = MyList([-4, 1, 2, 3, 4]); my_list.print_sorted()
[-4, 1, 2, 3, 4]

>>> my_list = MyList([-4, 1, 2, -3, 4]); my_list.print_sorted()
[-4, -3, 1, 2, 4]

>>> isinstance(my_list, list)
True

>>> issubclass(MyList, list)
True

>>> type(my_list) is MyList
True

>>> MyList.print_sorted("hello")
['e', 'h', 'l', 'l', 'o']

>>> MyList.print_sorted(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 16, in print_sorted
    print(sorted(self))
TypeError: 'int' object is not iterable

>>> MyList.print_sorted(1, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_sorted() takes 1 positional argument but 2 were given
